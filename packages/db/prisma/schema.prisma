// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @unique @default(cuid())
  userName  String    @unique
  password  String
  email     String    @unique
  myStreams Streams[]
  coSession CoHost[]  // Instead of storing Stream IDs, relate it to CoHost table
  role      Role      @default(USER)
}

model Streams {
  id          String    @id @unique @default(cuid())
  streamID    String    @unique
  streamTitle String
  description String
  startTime   DateTime
  endTime     DateTime
  status      Status?   @default(UPCOMING)
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String    // Stores the userName of the creator
  thumbnail   String?
  slides      Json?
  videoLink   String?
  coHosts     CoHost[]  // Relate to CoHost table
  createdAt   DateTime  @default(now()) // Added timestamps
  updatedAt   DateTime  @updatedAt
}

model CoHost {
  id        String  @id @unique @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  streamId  String
  stream    Streams @relation(fields: [streamId], references: [id], onDelete: Cascade)
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum Status {
  UPCOMING
  RUNNING
  COMPLETED
}
